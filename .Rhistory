ggeasy::easy_center_title()
positive <- length(which(leni_analysis2$score > 0))
negative <- length(which(lenianalysis2$score < 0))
neutral <- length(which(leni_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LeniLugaw Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis1$score > 0))
negative <- length(which(bb_analysis1$score < 0))
neutral <- length(which(bb_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #BBMIsMyPresident2022 Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis2$score > 0))
negative <- length(which(bb_analysis2$score < 0))
neutral <- length(which(bb_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #SolidSnort Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis1$score > 0))
negative <- length(which(leni_analysis1$score < 0))
neutral <- length(which(leni_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LetLeniLead Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis2$score > 0))
negative <- length(which(leni_analysis2$score < 0))
neutral <- length(which(leni_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LeniLugaw Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
bb_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #BBMIsMyPresident2022 from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
bb_tweet2 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #SolidSnort tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
leni_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #LetLeniLead tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
leni_tweet2 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #LeniLugaw tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
bb_analysis1 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#BBMIsMyPresident2022 Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
bb_analysis2 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#SolidSnort Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
leni_analysis1 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#LetLeniLead Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
leni_analysis2 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#LeniLugaw Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis1$score > 0))
negative <- length(which(bb_analysis1$score < 0))
neutral <- length(which(bb_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #BBMIsMyPresident2022 Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis2$score > 0))
negative <- length(which(bb_analysis2$score < 0))
neutral <- length(which(bb_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #SolidSnort Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
bb_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #BBMIsMyPresident2022 from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
## Set working directory
setwd("~/-+Twitter Bot+-/lezgo")
## Packages
library(httpuv) # web authentication
library(lubridate) # date and time
library(tm)       # text mining
library(rtweet) # R client for twitter's api
library(plyr)   # for some 'aply'
library(stringr) # for 'str' functions
library(ggplot2) # for plotting/graphing
library(ggeasy) # for QoL graphing
library(dplyr)  # Grammar manipulation
# Marcos_Frequency_Plot
bb_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #BBMIsMyPresident2022 from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
bb_tweet2 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #SolidSnort tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
leni_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #LetLeniLead tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
leni_tweet2 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #LeniLugaw tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
bb_analysis1 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#BBMIsMyPresident2022 Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
bb_analysis2 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#SolidSnort Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
leni_analysis1 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#LetLeniLead Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
leni_analysis2 %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "darkgray") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = "Sentiment Score", y = "Frequency",
title = "#LeniLugaw Sentiment Score Distribution (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis1$score > 0))
negative <- length(which(bb_analysis1$score < 0))
neutral <- length(which(bb_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #BBMIsMyPresident2022 Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis2$score > 0))
negative <- length(which(bb_analysis2$score < 0))
neutral <- length(which(bb_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #SolidSnort Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis1$score > 0))
negative <- length(which(leni_analysis1$score < 0))
neutral <- length(which(leni_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LetLeniLead Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis2$score > 0))
negative <- length(which(leni_analysis2$score < 0))
neutral <- length(which(leni_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LeniLugaw Tweet Sentiments",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
bb_tweet1 %>%
# Interval
ts_plot("3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of #BBMIsMyPresident2022 tweets from the past week",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
positive <- length(which(bb_analysis1$score > 0))
negative <- length(which(bb_analysis1$score < 0))
neutral <- length(which(bb_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #BBMIsMyPresident2022 tweet sentiments (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(bb_analysis2$score > 0))
negative <- length(which(bb_analysis2$score < 0))
neutral <- length(which(bb_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #SolidSnort tweet sentiments (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis1$score > 0))
negative <- length(which(leni_analysis1$score < 0))
neutral <- length(which(leni_analysis1$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LetLeniLead tweet sentiments (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
positive <- length(which(leni_analysis2$score > 0))
negative <- length(which(leni_analysis2$score < 0))
neutral <- length(which(leni_analysis2$score == 0))
sentiments <- c("Positive", "Neutral", "Negative")
count <- c(positive, neutral, negative)
# We want combine sentiment and count into a data frame, result
result <- data.frame(sentiments, count)
# factor() was used to categorize the strings from sentiment
result$sentiments <- factor(result$sentiments, levels = sentiments)
ggplot(result, aes(x = sentiments, y = count)) +
# stat = identity was used to created a legend on the side
geom_bar(stat = "identity", aes(fill = sentiments))+
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x ="Sentiments", y = "Count",
title = "Barplot of #LeniLugaw tweet sentiments (EN)",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
) +
ggeasy::easy_center_title()
